// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: order.proto

/*
Package order is a generated protocol buffer package.

It is generated from these files:
	order.proto

It has these top-level messages:
	CloseRequest
	CloseResponse
*/
package order

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BetOrder service

type BetOrderService interface {
	Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error)
}

type betOrderService struct {
	c    client.Client
	name string
}

func NewBetOrderService(name string, c client.Client) BetOrderService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "betorder"
	}
	return &betOrderService{
		c:    c,
		name: name,
	}
}

func (c *betOrderService) Close(ctx context.Context, in *CloseRequest, opts ...client.CallOption) (*CloseResponse, error) {
	req := c.c.NewRequest(c.name, "BetOrder.Close", in)
	out := new(CloseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BetOrder service

type BetOrderHandler interface {
	Close(context.Context, *CloseRequest, *CloseResponse) error
}

func RegisterBetOrderHandler(s server.Server, hdlr BetOrderHandler, opts ...server.HandlerOption) error {
	type betOrder interface {
		Close(ctx context.Context, in *CloseRequest, out *CloseResponse) error
	}
	type BetOrder struct {
		betOrder
	}
	h := &betOrderHandler{hdlr}
	return s.Handle(s.NewHandler(&BetOrder{h}, opts...))
}

type betOrderHandler struct {
	BetOrderHandler
}

func (h *betOrderHandler) Close(ctx context.Context, in *CloseRequest, out *CloseResponse) error {
	return h.BetOrderHandler.Close(ctx, in, out)
}
